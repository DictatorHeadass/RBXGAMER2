--[[
	@module InventoryManager
	@author DictatorHeadass
	@date August 2, 2025

	@description
	This script is the server-side "brain" for the entire inventory system.
	It manages all item containers, handles all item manipulation logic,
	and listens for client requests to ensure all actions are secure and valid.
]]

--================================================================
--||                     SERVICES & MODULES                     ||
--================================================================

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ItemFactory = require(ReplicatedStorage.ItemFactory)
local openContainerRemote = ReplicatedStorage.Remotes.RequestOpenContainer
local updateContainerRemote = ReplicatedStorage.Remotes.UpdateContainer
local requestMoveItemRemote = ReplicatedStorage.Remotes.RequestMoveItem

--================================================================
--||                         MODULE SETUP                       ||
--================================================================

local InventoryManager = {}
local Containers = {}

--================================================================
--||                   CORE API FUNCTIONS                       ||
--================================================================

function InventoryManager.CreateContainer(containerId, size)
	if Containers[containerId] then return end
	local newContainer = { Size = size, Slots = {} }
	Containers[containerId] = newContainer
	print("Created container:", containerId, "with", size, "slots.")
end

local function FindFirstEmptySlot(containerId)
	local container = Containers[containerId]
	if not container then return nil end
	for i = 1, container.Size do
		if not container.Slots[i] then
			return i
		end
	end
	return nil
end

function InventoryManager.AddItem(containerId, itemID, count)
	local container = Containers[containerId]
	if not container then return false end
	local newItem = ItemFactory.Create(itemID, count)
	if not newItem then return false end
	local emptySlot = FindFirstEmptySlot(containerId)
	if emptySlot then
		container.Slots[emptySlot] = newItem
		print("Added " .. itemID .. " to container " .. containerId .. " in slot " .. emptySlot)
		return true
	else
		print("Failed to add " .. itemID .. ": Container " .. containerId .. " is full.")
		return false
	end
end

-- [THIS IS THE FIX] I have added a safety check to ensure slot numbers are valid.
function InventoryManager.MoveItem(containerId, fromSlot, toSlot)
	local container = Containers[containerId]

	-- Safety Checks
	if not container or not container.Slots[fromSlot] then return false end
	if (fromSlot < 1 or fromSlot > container.Size) or (toSlot < 1 or toSlot > container.Size) then return false end

	if container.Slots[toSlot] then
		print("Move failed: Target slot", toSlot, "is already occupied.")
		return false
	end

	container.Slots[toSlot] = container.Slots[fromSlot]
	container.Slots[fromSlot] = nil
	print("Moved item in " .. containerId .. " from slot " .. fromSlot .. " to " .. toSlot)
	return true
end

--================================================================
--||             INTERNAL LOGIC & EVENT HANDLERS                ||
--================================================================

local function onPlayerAdded(player)
	local inventoryId = player.UserId .. "_Inventory"
	local bankId = player.UserId .. "_Bank"
	InventoryManager.CreateContainer(inventoryId, 30)
	InventoryManager.CreateContainer(bankId, 128)
	InventoryManager.AddItem(inventoryId, "HealthPotion", 5)
	if Containers[inventoryId] then
		updateContainerRemote:FireClient(player, "Inventory", Containers[inventoryId])
	end
end

local function onOpenContainerRequested(player, containerType, containerId)
	local targetContainerId
	if containerType == "Inventory" then
		targetContainerId = player.UserId .. "_Inventory"
	elseif containerType == "Bank" then
		targetContainerId = player.UserId .. "_Bank"
	elseif containerType == "Chest" then
		targetContainerId = containerId
		if not Containers[targetContainerId] then
			InventoryManager.CreateContainer(targetContainerId, 18)
		end
	end
	if targetContainerId and Containers[targetContainerId] then
		updateContainerRemote:FireClient(player, containerType, Containers[targetContainerId])
	end
end

local function onMoveItemRequested(player, containerType, fromSlot, toSlot)
	if containerType ~= "Inventory" then return end
	local containerId = player.UserId .. "_Inventory"
	local success = InventoryManager.MoveItem(containerId, fromSlot, toSlot)
	if success then
		updateContainerRemote:FireClient(player, "Inventory", Containers[containerId])
	end
end

--================================================================
--||                INITIALIZATION & CONNECTIONS                ||
--================================================================

Players.PlayerAdded:Connect(onPlayerAdded)
openContainerRemote.OnServerEvent:Connect(onOpenContainerRequested)
requestMoveItemRemote.OnServerEvent:Connect(onMoveItemRequested)

for _, player in ipairs(Players:GetPlayers()) do
	task.spawn(onPlayerAdded, player)
end

--================================================================

return InventoryManager
