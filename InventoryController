-- In StarterGui/InventoryGui/InventoryController

--================================================================
--||                     SERVICES & MODULES                     ||
--================================================================

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local ItemRegistry = require(ReplicatedStorage.ItemRegistry)
local UpdateContainerRemote = ReplicatedStorage.Remotes:WaitForChild("UpdateContainer")
local RequestOpenContainerRemote = ReplicatedStorage.Remotes:WaitForChild("RequestOpenContainer")
local RequestMoveItemRemote = ReplicatedStorage.Remotes:WaitForChild("RequestMoveItem") -- [DRAG & DROP] New Remote

--================================================================
--||                        UI REFERENCES                       ||
--================================================================

local player = Players.LocalPlayer
local inventoryGui = script.Parent
local inventoryWindow = inventoryGui:WaitForChild("InventoryWindow")

local characterPanel = inventoryWindow:WaitForChild("CharacterPanel")
local inventoryPanel = inventoryWindow:WaitForChild("InventoryPanel")
local statsPanel = inventoryWindow:WaitForChild("StatsPanel")
local healthValueLabel = statsPanel:WaitForChild("HealthValue")
local goldValueLabel = statsPanel:WaitForChild("GoldValue")
local defenseValueLabel = statsPanel:WaitForChild("DefenseValue")
local strengthValueLabel = statsPanel:WaitForChild("StrengthValue")
local dexterityValueLabel = statsPanel:WaitForChild("DexterityValue")
local intelligenceValueLabel = statsPanel:WaitForChild("IntelligenceValue")

local slotGrid = inventoryPanel 
local slotTemplate = inventoryPanel:WaitForChild("SlotTemplate")

--================================================================
--||                         MODULE STATE                       ||
--================================================================

local slotFrames = {}
local INVENTORY_SIZE = 30 
local containerData = nil -- [DRAG & DROP] Stores the latest inventory data from the server

-- [DRAG & DROP] State variables for managing drag operations
local isDragging = false
local dragStartSlot = nil
local floatingIcon = nil

--================================================================
--||                        CORE FUNCTIONS                      ||
--================================================================

--- Takes item data and updates a UI slot to display it.
local function drawSlot(slotFrame, itemData)
	-- ... (This function remains unchanged)
	local icon = slotFrame.Icon
	local countLabel = slotFrame.Count
	local nameLabel = slotFrame.ItemName
	if itemData then
		local itemInfo = ItemRegistry[itemData.ItemID]
		if not itemInfo then
			warn("Rendering error: Could not find item info for '" .. itemData.ItemID .. "' in ItemRegistry.")
			return
		end
		icon.Image = itemInfo.Icon
		nameLabel.Text = itemInfo.Name
		icon.Visible = true
		nameLabel.Visible = true
		if itemData.Count > 1 then
			countLabel.Text = itemData.Count
			countLabel.Visible = true
		else
			countLabel.Visible = false
		end
	else
		icon.Image = ""
		icon.Visible = false
		nameLabel.Visible = false
		countLabel.Visible = false
	end
end

--- Sets the character preview image using the Roblox web endpoint.
local function setupCharacterDisplay(player)
	-- ... (This function remains unchanged)
	local avatarImage = characterPanel:WaitForChild("AvatarImage")
	local url = "http://www.roblox.com/Thumbs/Avatar.ashx?x=420&y=420&Format=Png&username=" .. player.Name
	avatarImage.Image = url
end

--- Updates the stats panel with the character's and player's current information.
local function updateStatsDisplay(character)
	-- ... (This function remains unchanged)
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if not humanoid then return end
	local function updateHealth()
		local currentHealth = math.floor(humanoid.Health)
		local maxHealth = math.floor(humanoid.MaxHealth)
		healthValueLabel.Text = currentHealth .. " / " .. maxHealth
	end
	updateHealth()
	humanoid.HealthChanged:Connect(updateHealth)
	humanoid:GetPropertyChangedSignal("MaxHealth"):Connect(updateHealth)
	local leaderstats = player:WaitForChild("leaderstats")
	local gold = leaderstats:WaitForChild("Gold")
	local function updateGold()
		goldValueLabel.Text = gold.Value
	end
	updateGold()
	gold.Changed:Connect(updateGold)
	local function updateDefense()
		local totalDefense = 0
		defenseValueLabel.Text = totalDefense
	end
	updateDefense()
	local function updateCoreStats()
		strengthValueLabel.Text = character:GetAttribute("Strength")
		dexterityValueLabel.Text = character:GetAttribute("Dexterity")
		intelligenceValueLabel.Text = character:GetAttribute("Intelligence")
	end
	updateCoreStats()
	character.AttributeChanged:Connect(function(attributeName)
		if attributeName == "Strength" or attributeName == "Dexterity" or attributeName == "Intelligence" then
			updateCoreStats()
		end
	end)
end

--- Takes data from the server and updates the entire UI grid.
local function onInventoryUpdate(containerType, newContainerData)
	if containerType ~= "Inventory" then return end
	containerData = newContainerData -- [DRAG & DROP] Update our local copy of the data
	for i = 1, containerData.Size do
		if slotFrames[i] then
			local itemData = containerData.Slots[i]
			drawSlot(slotFrames[i], itemData)
		end
	end
end

--- Handles the 'Q' key press to toggle the inventory.
local function onInputBegan(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.Q then
		local isEnabled = not inventoryGui.Enabled
		inventoryGui.Enabled = isEnabled
		if isEnabled then
			RequestOpenContainerRemote:FireServer("Inventory")
		end
	end
end

-- [DRAG & DROP] --- Fires when the mouse moves; updates the floating icon's position.
UserInputService.InputChanged:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.UserInputType == Enum.UserInputType.MouseMovement and isDragging then
		floatingIcon.Position = UDim2.fromOffset(input.Position.X, input.Position.Y)
	end
end)

--- Fires when the mouse button is released; handles the drop logic.
UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 and isDragging then
		isDragging = false
		floatingIcon.Visible = false

		local targetSlot = nil

		-- [FIXED] This is a more reliable way to find which slot is under the mouse.
		for i, frame in ipairs(slotFrames) do
			local pos = frame.AbsolutePosition
			local size = frame.AbsoluteSize
			-- Check if the mouse's final position is within the boundaries of this frame
			if input.Position.X >= pos.X and input.Position.X <= pos.X + size.X and
				input.Position.Y >= pos.Y and input.Position.Y <= pos.Y + size.Y then
				targetSlot = i
				break
			end
		end

		if targetSlot and targetSlot ~= dragStartSlot then
			-- We found a valid slot to drop on, so tell the server.
			RequestMoveItemRemote:FireServer("Inventory", dragStartSlot, targetSlot)
		else
			-- If no valid target slot was found, the item returns to its original spot.
			-- We just need to refresh the UI from the server's data.
			RequestOpenContainerRemote:FireServer("Inventory")
		end

		dragStartSlot = nil
	end
end)


--- Creates the empty slot frames and initializes all systems.
local function initialize()
	-- Create a single floating icon for drag-and-drop visuals
	floatingIcon = Instance.new("ImageLabel")
	floatingIcon.Size = UDim2.fromOffset(70, 70) -- Match your slot size
	floatingIcon.BackgroundTransparency = 1
	floatingIcon.Visible = false
	floatingIcon.ZIndex = 10 -- Make sure it renders on top of everything
	floatingIcon.Parent = inventoryGui

	slotTemplate.Visible = false
	for i = 1, INVENTORY_SIZE do
		local newSlot = slotTemplate:Clone()
		newSlot.Name = "Slot_" .. i
		newSlot.Visible = true
		newSlot.Parent = slotGrid
		slotFrames[i] = newSlot

		-- [THIS IS THE FIX]
		-- We create a local variable here to "capture" the correct slot number for the event.
		local slotIndex = i 

		newSlot.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				-- Check if the slot isn't empty before starting a drag
				if containerData and containerData.Slots[slotIndex] then -- Use the captured slotIndex
					dragStartSlot = slotIndex -- Use the captured slotIndex
					isDragging = true

					-- Update and show the floating icon
					local itemInfo = ItemRegistry[containerData.Slots[slotIndex].ItemID] -- Use the captured slotIndex
					floatingIcon.Image = itemInfo.Icon
					floatingIcon.Visible = true
					floatingIcon.Position = UDim2.fromOffset(input.Position.X, input.Position.Y)
				end
			end
		end)
	end

	-- Connect other events
	UserInputService.InputBegan:Connect(onInputBegan)
	UpdateContainerRemote.OnClientEvent:Connect(onInventoryUpdate)
	setupCharacterDisplay(player)
	player.CharacterAdded:Connect(updateStatsDisplay)
	if player.Character then
		task.wait()
		updateStatsDisplay(player.Character)
	end

	print("InventoryController initialized and ready.")
end

--================================================================
initialize()
