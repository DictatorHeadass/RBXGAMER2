--[[
	@module InventoryController
	@author DictatorHeadass
	@date August 2, 2025

	@description
	This script is the client-side "face" for the inventory system.
	It handles all visual aspects, including creating the UI, drawing item icons,
	managing player input like key presses, and creating the visuals for drag-and-drop operations.
]]

--================================================================
--||                     SERVICES & MODULES                     ||
--================================================================

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local ItemRegistry = require(ReplicatedStorage.ItemRegistry)
local UpdateContainerRemote = ReplicatedStorage.Remotes:WaitForChild("UpdateContainer")
local RequestOpenContainerRemote = ReplicatedStorage.Remotes:WaitForChild("RequestOpenContainer")
local RequestMoveItemRemote = ReplicatedStorage.Remotes:WaitForChild("RequestMoveItem")

--================================================================
--||                        UI REFERENCES                       ||
--================================================================

local player = Players.LocalPlayer
local inventoryGui = script.Parent
local inventoryWindow = inventoryGui:WaitForChild("InventoryWindow")

local characterPanel = inventoryWindow:WaitForChild("CharacterPanel")
local inventoryPanel = inventoryWindow:WaitForChild("InventoryPanel")
local statsPanel = inventoryWindow:WaitForChild("StatsPanel")
local healthValueLabel = statsPanel:WaitForChild("HealthValue")
local goldValueLabel = statsPanel:WaitForChild("GoldValue")
local defenseValueLabel = statsPanel:WaitForChild("DefenseValue")
local strengthValueLabel = statsPanel:WaitForChild("StrengthValue")
local dexterityValueLabel = statsPanel:WaitForChild("DexterityValue")
local intelligenceValueLabel = statsPanel:WaitForChild("IntelligenceValue")

local slotGrid = inventoryPanel
local slotTemplate = inventoryPanel:WaitForChild("SlotTemplate")

--================================================================
--||                         MODULE STATE                       ||
--================================================================

local slotFrames = {}
local INVENTORY_SIZE = 30
local containerData = nil

local isDragging = false
local dragStartSlot = nil
local floatingIcon = nil

--================================================================
--||                        CORE FUNCTIONS                      ||
--================================================================

--- Takes item data and updates a UI slot to display it.
local function drawSlot(slotFrame, itemData)
	local icon = slotFrame.Icon
	local countLabel = slotFrame.Count
	local nameLabel = slotFrame.ItemName
	local debugLabel = slotFrame.DebugIndexLabel

	if itemData then
		local itemInfo = ItemRegistry[itemData.ItemID]
		if not itemInfo then return end
		icon.Image = itemInfo.Icon
		nameLabel.Text = itemInfo.Name
		icon.Visible = true
		nameLabel.Visible = true
		if itemData.Count > 1 then
			countLabel.Text = itemData.Count
			countLabel.Visible = true
		else
			countLabel.Visible = false
		end
	else
		icon.Image = ""
		icon.Visible = false
		nameLabel.Visible = false
		countLabel.Visible = false
	end
end

--- Sets the character preview image.
local function setupCharacterDisplay(player)
	local avatarImage = characterPanel:WaitForChild("AvatarImage")
	local url = "http://www.roblox.com/Thumbs/Avatar.ashx?x=420&y=420&Format=Png&username=" .. player.Name
	avatarImage.Image = url
end

--- Updates the stats panel.
local function updateStatsDisplay(character)
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if not humanoid then return end
	local function updateHealth()
		healthValueLabel.Text = math.floor(humanoid.Health) .. " / " .. math.floor(humanoid.MaxHealth)
	end
	updateHealth()
	humanoid.HealthChanged:Connect(updateHealth)
	humanoid:GetPropertyChangedSignal("MaxHealth"):Connect(updateHealth)
	local leaderstats = player:WaitForChild("leaderstats")
	local gold = leaderstats:WaitForChild("Gold")
	local function updateGold() goldValueLabel.Text = gold.Value end
	updateGold()
	gold.Changed:Connect(updateGold)
	local function updateDefense() defenseValueLabel.Text = 0 end
	updateDefense()
	local function updateCoreStats()
		strengthValueLabel.Text = character:GetAttribute("Strength")
		dexterityValueLabel.Text = character:GetAttribute("Dexterity")
		intelligenceValueLabel.Text = character:GetAttribute("Intelligence")
	end
	updateCoreStats()
	character.AttributeChanged:Connect(function(attributeName)
		if attributeName == "Strength" or attributeName == "Dexterity" or attributeName == "Intelligence" then
			updateCoreStats()
		end
	end)
end

--- Takes data from the server and updates the UI grid.
local function onInventoryUpdate(containerType, newContainerData)
	if containerType ~= "Inventory" then return end
	containerData = newContainerData
	for i = 1, containerData.Size do
		if slotFrames[i] then
			local itemData = containerData.Slots[i]
			drawSlot(slotFrames[i], itemData)
		end
	end
end

--- Handles the 'Q' key press to toggle the inventory.
local function onKeypress(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.Q then
		local isEnabled = not inventoryGui.Enabled
		inventoryGui.Enabled = isEnabled
		if isEnabled then
			RequestOpenContainerRemote:FireServer("Inventory")
		end
	end
end

--- Handles starting a drag on a specific slot.
local function onDragBegan(slotFrame, input)
	local slotIndex = slotFrame:GetAttribute("SlotIndex")
	if not slotIndex then return end

	if containerData and containerData.Slots[slotIndex] then
		dragStartSlot = slotIndex
		isDragging = true

		local itemInfo = ItemRegistry[containerData.Slots[slotIndex].ItemID]
		floatingIcon.Image = itemInfo.Icon
		floatingIcon.Visible = true
		floatingIcon.Position = UDim2.fromOffset(input.Position.X, input.Position.Y)
	end
end

--- Handles ending a drag anywhere on the screen.
local function onDragEnded(input)
	if not isDragging then return end
	isDragging = false
	floatingIcon.Visible = false

	local targetSlot = nil
	local guiObjects = player.PlayerGui:GetGuiObjectsAtPosition(input.Position.X, input.Position.Y)

	for _, guiObject in ipairs(guiObjects) do
		local foundIndex = guiObject:GetAttribute("SlotIndex")
		if foundIndex then
			targetSlot = foundIndex
			break
		end
	end

	if targetSlot and targetSlot ~= dragStartSlot then
		RequestMoveItemRemote:FireServer("Inventory", dragStartSlot, targetSlot)
	else
		RequestOpenContainerRemote:FireServer("Inventory")
	end

	dragStartSlot = nil
end

--- Fires when the mouse moves; updates the floating icon's position.
local function onMouseMoved(input)
	if isDragging then
		floatingIcon.Position = UDim2.fromOffset(input.Position.X, input.Position.Y)
	end
end

--- Creates the empty slot frames and initializes all systems.
local function initialize()
	floatingIcon = Instance.new("ImageLabel", inventoryGui)
	floatingIcon.Size = UDim2.fromOffset(70, 70)
	floatingIcon.BackgroundTransparency = 1
	floatingIcon.Visible = false
	floatingIcon.ZIndex = 10

	slotTemplate.Visible = false
	for i = 1, INVENTORY_SIZE do
		local newSlot = slotTemplate:Clone()
		newSlot.Name = "Slot_" .. i
		newSlot.Visible = true
		newSlot.Parent = slotGrid
		newSlot:SetAttribute("SlotIndex", i)
		newSlot.DebugIndexLabel.Text = tostring(i)
		slotFrames[i] = newSlot

		-- Connect the drag start event for this specific button
		newSlot.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				onDragBegan(newSlot, input)
			end
		end)
	end

	-- Connect global input events
	UserInputService.InputBegan:Connect(onKeypress)
	UserInputService.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			onMouseMoved(input)
		end
	end)
	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			onDragEnded(input)
		end
	end)

	-- Connect server event
	UpdateContainerRemote.OnClientEvent:Connect(onInventoryUpdate)

	-- Setup initial displays
	setupCharacterDisplay(player)
	player.CharacterAdded:Connect(updateStatsDisplay)
	if player.Character then
		task.wait()
		updateStatsDisplay(player.Character)
	end
	print("InventoryController initialized and ready.")
end

--================================================================
initialize()
